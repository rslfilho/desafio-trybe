---
swagger: '2.0'
info:
  title: Blogs API
  version: 0.0.1
  description: |
    Documentação para a API de Blogs
    Esta API foi desenvolvida para o desafio técnico da Trybe
    Aplicante: Roberval Filho
    Desafio: Arquiteturar e desenvolver uma API de um CRUD de posts de BLOG seguindo requisitos estabelecidos.

    Email: rslfilho@gmail.com
    Github: https://github.com/rslfilho
    LinkedIn: https://www.linkedin.com/in/rslfilho/
    Data: 08/03/2022

securityDefinitions:
  userAuth:
    type: apiKey
    in: header
    name: Authorization

basePath: /
paths:
  /login:
    post:
      tags:
        - Login
      summary: "Faz o login de um usuário"
      description: Recebe as informações do usuário, confere com as do banco de dados e em caso de informações válidas retorna um token de autenticação.
      parameters:
        - in: body
          name: body
          type: object
          required: true
          schema:
            type: object
            properties:
              email: 
                type: string
              password:
                type: string
      produces:
        - application/json
      responses:
        200:
          description: Retorna um token de autenticação
        400:
          description: Informações enviadas mal formatadas, algum campo inválido ou usuário não existe
        500:
          description: Erro interno de servidor
  /user:
    post:
      tags:
        - User
      summary: "Adiciona um novo usuário no banco de dados"
      description: Verifica se as informações enviadas são válidas e, em caso positivo, cadastra o novo usuário no banco de dados.
      parameters:
        - in: body
          name: body
          type: object
          required: true
          schema:
            type: object
            properties:
              displayName:
                type: string
              email: 
                type: string
              password:
                type: string
              image:
                type: string
      produces:
        - application/json
      responses:
        201:
          description: Usuário criado e retorna um token de autenticação
        400:
          description: Informações enviadas mal formatadas, algum campo inválido
        409:
          description: Email já existente no banco de dados
        500:
          description: Erro interno de servidor
    get:
      security:
        - userAuth: []
      tags:
        - User
      summary: "Lista todos os usuários cadastrados no banco de dados"
      description: Verifica se o usuário está autenticado e lista todos os usuários cadastrados no banco de dados
      produces:
        - application/json
      responses:
        200:
          description: Retorna uma lista com os usuários cadastrados
        401:
          description: Token de autenticação ausente ou incorreto
        500:
          description: Erro interno de servidor
  /user/{id}:
    get:
      security:
        - userAuth: []
      tags:
        - User
      summary: "Retorna um usuário cadastrado a partir do ID"
      description: Verifica se o usuário está autenticado, recebe o ID pelos parâmetros da rota, busca no banco o usuário referente a esse ID e retorna as informações deste usuário.
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Id do usuário
      produces:
        - application/json
      responses:
        200:
          description: Retorna as informações do usuário a partir do ID
        401:
          description: Token de autenticação ausente ou incorreto
        404:
          description: Usuário com o ID passado não encontrado no banco de dados
        500:
          description: Erro interno de servidor
  /user/me:  
    delete:
      security:
        - userAuth: []
      tags:
        - User
      summary: "Deleta o próprio usuário cadastrado"
      description: Verifica se o usuário está autenticado, recebe o ID a partir do token de autenticação, busca no banco o usuário referente a esse ID e deleta as informações deste usuário.
      produces:
        - application/json
      responses:
        204:
          description: Sem conteúdo
        401:
          description: Token de autenticação ausente ou incorreto
        500:
          description: Erro interno de servidor
  /post:
    post:
      security:
        - userAuth: []
      tags:
        - Post
      summary: "Adiciona um novo BlogPost no banco de dados"
      description: Verifica se o usuário está autenticado e se as informações enviadas são válidas e, em caso positivo, cadastra o novo BlogPost no banco de dados.
      parameters:
        - in: body
          name: body
          type: object
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              content: 
                type: string
      produces:
        - application/json
      responses:
        201:
          description: BlogPost criado e retorna as informações do post
        400:
          description: Informações enviadas mal formatadas, algum campo inválido
        401:
          description: Token de autenticação ausente ou incorreto
        500:
          description: Erro interno de servidor
    get:
      security:
        - userAuth: []
      tags:
        - Post
      summary: "Lista todos os BlogPosts cadastrados"
      description: Verifica se o usuário está autenticado e lista todos os BlogPosts cadastrados no banco de dados
      responses:
        200:
          description: Retorna todos os BlogPosts cadastrados no banco de dados
        401:
          description: Token de autenticação ausente ou incorreto
        500:
          description: Erro interno de servidor
  /post/{id}:
    get:
      security:
        - userAuth: []
      tags:
        - Post
      summary: "Retorna um BlogPost cadastrado a partir do ID"
      description: Verifica se o usuário está autenticado, recebe o ID pelos parâmetros da rota, busca no banco o BlogPost referente a esse ID e retorna as informações deste post.
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Id do BlogPost
      produces:
        - application/json
      responses:
        200:
          description: Retorna as informações do post a partir do ID
        401:
          description: Token de autenticação ausente ou incorreto
        404:
          description: BlogPost com o ID passado não encontrado no banco de dados
        500:
          description: Erro interno de servidor
    put:
      security:
        - userAuth: []
      tags:
        - Post
      summary: "Atualiza o conteúdo de um BlogPost a partir do ID"
      description: Verifica se o usuário está autenticado, recebe o ID pelos parâmetros da rota, busca no banco o post referente a esse ID, verifica se o usuário é o criador do post e atualiza as informações deste post.
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Id do BlogPost
        - in: body
          name: body
          type: object
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              content: 
                type: string
      produces:
        - application/json
      responses:
        200:
          description: Retorna as informações do BlogPost atualizadas
        400:
          description: Informações enviadas mal formatadas, algum campo inválido
        401:
          description: Token de autenticação ausente, incorreto ou usuário não é o criador do post
        404:
          description: BlogPost com o ID passado não encontrado no banco de dados
        500:
          description: Erro interno de servidor
    delete:
      security:
        - userAuth: []
      tags:
        - Post
      summary: "Deleta um BlogPost cadastrado a partir do ID"
      description: Verifica se o usuário está autenticado, recebe o ID pelos parâmetros da rota, busca no banco o post referente a esse ID, verifica se o usuário é o criador do post e deleta as informações deste post.
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Id do BlogPost
      responses:
        204:
          description: Sem conteúdo
        401:
          description: Token de autenticação ausente, incorreto ou de um usuário sem nível de acesso apropriado
        404:
          description: BlogPost com o ID passado não encontrado no banco de dados
        500:
          description: Erro interno de servidor
  /post/search:  
    get:
      security:
        - userAuth: []
      tags:
        - Post
      summary: "Retorna uma lista de posts que contemplem a busca no título ou conteúdo"
      description: Verifica se o usuário está autenticado, recebe o termo de busca pelos parâmetros da rota, busca no banco os post que contemplem essa busca e lista as informações destes posts.
      parameters:
        - in: query
          name: q
          type: string
          description: Termo de busca
      responses:
        200:
          description: Lista de BlogPosts que contemplem o termo da busca no título ou conteúdo, lista de todos os posts quando o termo de busca é vazio ou lista vazia quando o termo não é encontrado
        401:
          description: Token de autenticação ausente ou incorreto
        500:
          description: Erro interno de servidor
    